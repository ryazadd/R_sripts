t<-subset(x = mydata, Sex == 1, select = c(Weight))
# girls
t1<-subset(x = mydata, Sex == 0, select = c(Weight))
hist(t$Weight)
hist(t1$Weight)
hist(t$Weight,main="Distribution of weight by Sex "
,xlab="Weight of boys", col=rgb(248/255,180/255,0), freq=FALSE)
hist(t1$Weight, main="Distribution of weight by Sex " ,xlab="weight of girls", col=rgb(44/255,120/255,108/255), freq = FALSE )
summary(t$Weight)
summary(t1$Weight)
# summary(mydata)
library(ggplot2)
library(dplyr)
library(g.data)
library(sqldf)
euroweight_dat <- read_delim("C:\\Users\\Daria_Riazanova\\Documents\\R\\R_sripts\\euroweight_dat.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
names(euroweight_dat)[1] <- "ID"
names(euroweight_dat)[2] <- "Weight"
names(euroweight_dat)[3] <- "Batch"
batch1
batch1<-euroweight_dat[euroweight_dat$Batch == 1, ]
for (i in seq(1,8)){
hist(euroweight_dat[euroweight_dat$Batch == i, ]$Weight
,main = paste("Hist of Batch #",toString(i)),
col=rgb(148/255,211/255,172/255)
,xlab = "Weight", freq=FALSE)
curve(dnorm(x,mean=mean(euroweight_dat[euroweight_dat$Batch == i, ]$Weight)
,sd=sd(euroweight_dat[euroweight_dat$Batch == i, ]$Weight))
, add=TRUE,col="red")
}
hist(euroweight_dat$Weight
,main = paste("Hist of full data set")
,xlab = "Weight")
summary(euroweight_dat$Weight)
sd(euroweight_dat$Weight)
library(readr)
airportdat <- read_delim("airportdat.txt",
";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(airportdat)
library(ggplot2)
library(dplyr)
library(g.data)
library(sqldf)
euroweight_dat <- read_delim("C:\\Users\\Daria_Riazanova\\Documents\\R\\R_sripts\\euroweight_dat.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
names(euroweight_dat)[1] <- "ID"
names(euroweight_dat)[2] <- "Weight"
names(euroweight_dat)[3] <- "Batch"
batch1
batch1<-euroweight_dat[euroweight_dat$Batch == 1, ]
for (i in seq(1,8)){
hist(euroweight_dat[euroweight_dat$Batch == i, ]$Weight
,main = paste("Hist of Batch #",toString(i)),
col=rgb(148/255,211/255,172/255)
,xlab = "Weight", freq=FALSE)
curve(dnorm(x,mean=mean(euroweight_dat[euroweight_dat$Batch == i, ]$Weight)
,sd=sd(euroweight_dat[euroweight_dat$Batch == i, ]$Weight))
, add=TRUE,col="red")
}
hist(euroweight_dat$Weight
,main = paste("Hist of full data set")
,xlab = "Weight")
summary(euroweight_dat$Weight)
sd(euroweight_dat$Weight)
library(mixtools)
library(ggplot2)
library(dplyr)
library(g.data)
library(sqldf)
airportdat <- read_delim("R/data/airportdat.txt",
";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
names(airportdat)[1] <- "Airport"
names(airportdat)[2] <- "City"
names(airportdat)[3] <- "Scheduled_departures"
names(airportdat)[4] <- "Performed_departures"
names(airportdat)[5] <- "Enplaned_passengers"
names(airportdat)[6] <- "Tons_freight"
names(airportdat)[7] <- "Tons_mail"
hist(airportdat$Scheduled_departures, col=rgb(225/255,244/255, 243/255)
,main = "Scheduled departments"
,xlab="Numbers of depsrtments")
hist(airportdat$Performed_departures, col=rgb(248/255,180/255,0)
, main="Distrubition Performed_departures"
,xlab="Number of passangers")
hist(airportdat$Tons_freight, col="blue")
hist(airportdat$Tons_mail,add=T, col="red")
boxplot(airportdat$Tons_freight, main = "Tons_freight")
boxplot(airportdat$Performed_departures, main = "Performed_departures")
City_Pass<-sqldf("select City, SUM(Enplaned_passengers) as sum from airportdat group by City")
Max_city_Pas<-sqldf("select City from City_Pass order by sum desc limit 1")
City_Tones_freight<-sqldf("select City, SUM(Tons_freight) as sum from airportdat group by City")
Max_city_freight<-sqldf("select City from City_Tones_freight order by sum desc limit 1")
Max_city_freight
# Сравниваем теоритическое биномиальное распределение сравниваем с выборкой
temp<-rbinom(44,1,0.5)
a=rbinom(44,1,0.5)
b=mydata$Sex
hist(a,xlab="Sex",xlim=c(0,1), col=rgb(1,0,0,0.5), main="Distribution of number boys and girs with binomial")
hist(b,add=T, col=rgb(0,0,1,0.5))
library(mixtools)
library(ggplot2)
library(dplyr)
library(g.data)
library(sqldf)
library(hplot)
mydata = read.table("C:\\Users\\Daria_Riazanova\\Documents\\R\\data\\babyboom_dat.txt")
plot(mydata$V4,
mydata$V3,
xlab="Time",
ylab="Weight",
col="blue",
main = "Weight by minutes")
names(mydata)[1] <- "Time"
names(mydata)[2] <- "Sex"
names(mydata)[3] <- "Weight"
names(mydata)[4] <- "Minutes"
# Сравниваем теоритическое биномиальное распределение сравниваем с выборкой
temp<-rbinom(44,1,0.5)
nrow(subset(mydata,Sex == "1"))
nrow(subset(mydata,Sex == "0"))
a=rbinom(44,1,0.5)
b=mydata$Sex
hist(a,xlab="Sex",xlim=c(0,1), col=rgb(1,0,0,0.5), main="Distribution of number boys and girs with binomial")
hist(b,add=T, col=rgb(0,0,1,0.5))
# a = rpois(n, lambda)
vec_min<-mydata$Minutes
hours<-rep(0, 24)
for (y in seq(1,24, by=1)){
# print(y)
for (i in vec_min){
# print(i)
if (i/(y*60)<=1){
hours[y]=hours[y]+1
vec_min = vec_min[vec_min!= i]
# print(vec_min)
}
else{break}
}
# break
}
# Распределение Пуассона, lambda -  среднее число рождений в сутки
a_pois = rpois(44, 1.83)
hist(a_pois,main="Distribution births per hour for each hour " ,xlab="numbers kids per hour",xlim=c(0,4), col=rgb(248/255,180/255,0))
hist(hours, add=T, col=rgb(44/255,120/255,108/255) )
hist(hours
,main="Distribution births per hour for each hour"
,xlab="numbers kids per hour"
,xlim=c(0,4)
,col=rgb(44/255,120/255,108/255)
,freq=FALSE)
curve(dpois(x, 1.83, log = FALSE),add=T, col="red")
# Task 1.4
vec_min<-mydata$Minutes
vec_diff<-rep(0, length(vec_min)-1)
#
for (i in seq(1, length(vec_min)-1)){
vec_diff[i]=vec_min[i+1]-vec_min[i]
}
a_exp = rexp(44,0.03)
hist(a_exp,main="Distribution times between births "
,xlab="diff between birth", col=rgb(248/255,180/255,0))
hist(vec_diff, add=T, col=rgb(44/255,120/255,108/255) )
hist(vec_diff)
hist(a_exp)
# Task1.5
# boys
t<-subset(x = mydata, Sex == 1, select = c(Weight))
# girls
t1<-subset(x = mydata, Sex == 0, select = c(Weight))
hist(t$Weight)
hist(t1$Weight)
hist(t$Weight,main="Distribution of weight by Sex "
,xlab="Weight of boys", col=rgb(248/255,180/255,0), freq=FALSE)
hist(t1$Weight, main="Distribution of weight by Sex " ,xlab="weight of girls", col=rgb(44/255,120/255,108/255), freq = FALSE )
summary(t$Weight)
summary(t1$Weight)
# summary(mydata)
summary(vec_diff)
1/33
# Task1.5
# boys
t<-subset(x = mydata, Sex == 1, select = c(Weight))
# girls
t1<-subset(x = mydata, Sex == 0, select = c(Weight))
hist(t$Weight)
hist(t1$Weight)
hist(t$Weight,main="Distribution of weight by Sex "
,xlab="Weight of boys", col=rgb(248/255,180/255,0), freq=FALSE)
hist(t1$Weight, main="Distribution of weight by Sex " ,xlab="weight of girls", col=rgb(44/255,120/255,108/255), freq = FALSE )
library(mixtools)
library(ggplot2)
library(dplyr)
library(g.data)
library(sqldf)
airportdat <- read_delim("R/data/airportdat.txt",
";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
names(airportdat)[1] <- "Airport"
names(airportdat)[2] <- "City"
names(airportdat)[3] <- "Scheduled_departures"
names(airportdat)[4] <- "Performed_departures"
names(airportdat)[5] <- "Enplaned_passengers"
names(airportdat)[6] <- "Tons_freight"
names(airportdat)[7] <- "Tons_mail"
hist(airportdat$Scheduled_departures, col=rgb(225/255,244/255, 243/255)
,main = "Scheduled departments"
,xlab="Numbers of depsrtments")
hist(airportdat$Performed_departures, col=rgb(248/255,180/255,0)
, main="Distrubition Performed_departures"
,xlab="Number of passangers")
hist(airportdat$Tons_freight, col="blue")
hist(airportdat$Tons_mail,add=T, col="red")
boxplot(airportdat$Tons_freight, main = "Tons_freight")
boxplot(airportdat$Performed_departures, main = "Performed_departures")
City_Pass<-sqldf("select City, SUM(Enplaned_passengers) as sum from airportdat group by City")
Max_city_Pas<-sqldf("select City from City_Pass order by sum desc limit 1")
City_Tones_freight<-sqldf("select City, SUM(Tons_freight) as sum from airportdat group by City")
Max_city_freight<-sqldf("select City from City_Tones_freight order by sum desc limit 1")
Max_city_freight
library(ggplot2)
library(dplyr)
library(g.data)
library(sqldf)
euroweight_dat <- read_delim("C:\\Users\\Daria_Riazanova\\Documents\\R\\R_sripts\\euroweight_dat.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
names(euroweight_dat)[1] <- "ID"
names(euroweight_dat)[2] <- "Weight"
names(euroweight_dat)[3] <- "Batch"
batch1
batch1<-euroweight_dat[euroweight_dat$Batch == 1, ]
for (i in seq(1,8)){
hist(euroweight_dat[euroweight_dat$Batch == i, ]$Weight
,main = paste("Hist of Batch #",toString(i)),
col=rgb(148/255,211/255,172/255)
,xlab = "Weight", freq=FALSE)
curve(dnorm(x,mean=mean(euroweight_dat[euroweight_dat$Batch == i, ]$Weight)
,sd=sd(euroweight_dat[euroweight_dat$Batch == i, ]$Weight))
, add=TRUE,col="red")
}
hist(euroweight_dat$Weight
,main = paste("Hist of full data set")
,xlab = "Weight")
summary(euroweight_dat$Weight)
sd(euroweight_dat$Weight)
library(ggplot2)
library(dplyr)
library(g.data)
library(sqldf)
euroweight_dat <- read_delim("C:\\Users\\Daria_Riazanova\\Documents\\R\\R_sripts\\euroweight_dat.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
names(euroweight_dat)[1] <- "ID"
names(euroweight_dat)[2] <- "Weight"
names(euroweight_dat)[3] <- "Batch"
batch1
batch1<-euroweight_dat[euroweight_dat$Batch == 1, ]
for (i in seq(1,8)){
hist(euroweight_dat[euroweight_dat$Batch == i, ]$Weight
,main = paste("Hist of Batch #",toString(i)),
col=rgb(148/255,211/255,172/255)
,xlab = "Weight", freq=FALSE)
curve(dnorm(x,mean=mean(euroweight_dat[euroweight_dat$Batch == i, ]$Weight)
,sd=sd(euroweight_dat[euroweight_dat$Batch == i, ]$Weight))
, add=TRUE,col="red")
}
hist(euroweight_dat$Weight
,main = paste("Hist of full data set")
,xlab = "Weight")
summary(euroweight_dat$Weight)
sd(euroweight_dat$Weight)
library(tidyverse)
import(tidyverse)
install.packages("tidyverse")
euroweight_dat <- read_delim("C:\\Users\\Daria_Riazanova\\Documents\\R\\R_sripts\\euroweight_dat.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
install.packages("readr")
euroweight_dat <- read_delim("C:\\Users\\Daria_Riazanova\\Documents\\R\\R_sripts\\euroweight_dat.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
library(readr)
airportdat <- read_delim("airportdat.txt",
";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
View(airportdat)
trim_ws = TRUE)
names(airportdat)[1] <- "Airport"
names(airportdat)[2] <- "City"
names(airportdat)[3] <- "Scheduled_departures"
names(airportdat)[4] <- "Performed_departures"
names(airportdat)[5] <- "Enplaned_passengers"
names(airportdat)[6] <- "Tons_freight"
names(airportdat)[7] <- "Tons_mail"
names(airportdat)[1] <- "Airport"
names(airportdat)[2] <- "City"
names(airportdat)[3] <- "Scheduled_departures"
names(airportdat)[4] <- "Performed_departures"
names(airportdat)[5] <- "Enplaned_passengers"
names(airportdat)[6] <- "Tons_freight"
names(airportdat)[7] <- "Tons_mail"
mydata = read.table("C:\\Users\\Daria_Riazanova\\Documents\\R\\data\\babyboom_dat.txt")
View(airportdat)
View(airportdat)
airportdat <- read.delim("C:\\Users\\Daria_Riazanova\\Documents\\R\\data\\airportdat.txt",
";", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
airportdat <- read.delim("C:\\Users\\Daria_Riazanova\\Documents\\R\\data\\airportdat.txt",
";",header = FALSE)
View(airportdat)
names(airportdat)[1] <- "Airport"
names(airportdat)[2] <- "City"
names(airportdat)[3] <- "Scheduled_departures"
names(airportdat)[4] <- "Performed_departures"
names(airportdat)[5] <- "Enplaned_passengers"
names(airportdat)[6] <- "Tons_freight"
names(airportdat)[7] <- "Tons_mail"
hist(airportdat$Scheduled_departures, col=rgb(225/255,244/255, 243/255)
,main = "Scheduled departments"
,xlab="Numbers of depsrtments")
hist(airportdat$Performed_departures, col=rgb(248/255,180/255,0)
, main="Distrubition Performed_departures"
,xlab="Number of passangers")
hist(airportdat$Tons_freight, col="blue")
hist(airportdat$Tons_mail,add=T, col="red")
boxplot(airportdat$Tons_freight, main = "Tons_freight")
boxplot(airportdat$Performed_departures, main = "Performed_departures")
City_Pass<-sqldf("select City, SUM(Enplaned_passengers) as sum from airportdat group by City")
Max_city_Pas<-sqldf("select City from City_Pass order by sum desc limit 1")
City_Tones_freight<-sqldf("select City, SUM(Tons_freight) as sum from airportdat group by City")
Max_city_freight<-sqldf("select City from City_Tones_freight order by sum desc limit 1")
Max_city_freight
View(Max_city_freight)
View(Max_city_freight)
airportdat <- read.delim("C:\\Users\\Daria_Riazanova\\Documents\\R\\data\\euroweight_dat.txt",
";",header = FALSE)
euroweight_dat <- read.delim("C:\\Users\\Daria_Riazanova\\Documents\\R\\data\\euroweight_dat.txt",
";",header = FALSE)
View(euroweight_dat)
View(euroweight_dat)
euroweight_dat <- read.delim("C:\\Users\\Daria_Riazanova\\Documents\\R\\data\\euroweight_dat.txt",
"\t",header = FALSE)
View(euroweight_dat)
View(euroweight_dat)
plot(mydata$V4,
mydata$V3,
xlab="Time",
ylab="Weight",
col="blue",
main = "Weight by minutes")
names(mydata)[1] <- "Time"
names(mydata)[2] <- "Sex"
names(mydata)[3] <- "Weight"
names(mydata)[4] <- "Minutes"
mydata = read.table("C:\\Users\\Daria_Riazanova\\Documents\\R\\data\\babyboom_dat.txt")
plot(mydata$V4,
mydata$V3,
xlab="Time",
ylab="Weight",
col="blue",
main = "Weight by minutes")
names(mydata)[1] <- "Time"
names(mydata)[2] <- "Sex"
names(mydata)[3] <- "Weight"
names(mydata)[4] <- "Minutes"
nrow(subset(mydata,Sex == "1"))
nrow(subset(mydata,Sex == "0"))
a=rbinom(44,1,0.5)
b=mydata$Sex
hist(a,xlab="Sex",xlim=c(0,1), col=rgb(1,0,0,0.5), main="Distribution of number boys and girs with binomial")
hist(b,add=T, col=rgb(0,0,1,0.5))
# Сравниваем теоритическое биномиальное распределение сравниваем с выборкой
temp<-rbinom(44,1,0.5)
nrow(subset(mydata,Sex == "1"))
nrow(subset(mydata,Sex == "0"))
a=rbinom(44,1,0.5)
b=mydata$Sex
hist(a,xlab="Sex",xlim=c(0,1), col=rgb(1,0,0,0.5), main="Distribution of number boys and girs with binomial")
hist(b,add=T, col=rgb(0,0,1,0.5))
# Сравниваем теоритическое биномиальное распределение сравниваем с выборкой
temp<-rbinom(44,1,0.5)
nrow(subset(mydata,Sex == "1"))
nrow(subset(mydata,Sex == "0"))
a=rbinom(44,1,0.5)
b=mydata$Sex
hist(a,xlab="Sex",xlim=c(0,1), col=rgb(1,0,0,0.5), main="Distribution of number boys and girs with binomial")
hist(b,add=T, col=rgb(0,0,1,0.5))
# a = rpois(n, lambda)
vec_min<-mydata$Minutes
hours<-rep(0, 24)
for (y in seq(1,24, by=1)){
# print(y)
for (i in vec_min){
# print(i)
if (i/(y*60)<=1){
hours[y]=hours[y]+1
vec_min = vec_min[vec_min!= i]
# print(vec_min)
}
else{break}
}
# break
}
# Распределение Пуассона, lambda -  среднее число рождений в сутки
a_pois = rpois(44, 1.83)
hist(a_pois,main="Distribution births per hour for each hour " ,xlab="numbers kids per hour",xlim=c(0,4), col=rgb(248/255,180/255,0))
hist(hours, add=T, col=rgb(44/255,120/255,108/255) )
hist(hours
,main="Distribution births per hour for each hour"
,xlab="numbers kids per hour"
,xlim=c(0,4)
,col=rgb(44/255,120/255,108/255)
,freq=FALSE)
curve(dpois(x, 1.83, log = FALSE),add=T, col="red")
# Task 1.4
vec_min<-mydata$Minutes
vec_diff<-rep(0, length(vec_min)-1)
#
for (i in seq(1, length(vec_min)-1)){
vec_diff[i]=vec_min[i+1]-vec_min[i]
}
a_exp = rexp(44,0.03)
hist(a_exp,main="Distribution times between births "
,xlab="diff between birth", col=rgb(248/255,180/255,0))
hist(vec_diff, add=T, col=rgb(44/255,120/255,108/255) )
hist(vec_diff)
hist(a_exp)
# Task1.5
# boys
t<-subset(x = mydata, Sex == 1, select = c(Weight))
# girls
t1<-subset(x = mydata, Sex == 0, select = c(Weight))
hist(t$Weight)
hist(t1$Weight)
hist(t$Weight,main="Distribution of weight by Sex "
,xlab="Weight of boys", col=rgb(248/255,180/255,0), freq=FALSE)
hist(t1$Weight, main="Distribution of weight by Sex " ,xlab="weight of girls", col=rgb(44/255,120/255,108/255), freq = FALSE )
summary(t$Weight)
summary(t1$Weight)
# summary(mydata)
ks.test
ks.test
ks.test(t, y=null, alternative = c("two.sided", "less", "greater"), exact = NULL)
ks.test(t, alternative = c("two.sided", "less", "greater"), exact = NULL)
ks.test(t, y=NULL,alternative = c("two.sided", "less", "greater"), exact = NULL)
ks.test(t, y=pnorm,alternative = c("two.sided", "less", "greater"), exact = NULL)
ks.test(t, y=pnorm(mean=mean(t), sd=sd(t)*n/(n-1),alternative = c("two.sided", "less", "greater"), exact = NULL)
ks.test(t, y=pnorm(mean=mean(t), sd=sd(t)*n/(n-1)),alternative = c("two.sided", "less", "greater"), exact = NULL)
ks.test(t, y=pnorm(q, mean=mean(t), sd=sd(t)*n/(n-1)),alternative = c("two.sided", "less", "greater"), exact = NULL)
y=pnorm(q, mean=mean(t), sd=sd(t)*n/(n-1))
t
ks.test(t$Weight, y=pnorm(q, mean=mean(t$Weight), sd=sd(t$Weight)*n/(n-1)),alternative = c("two.sided", "less", "greater"), exact = NULL)
y=pnorm(q, mean=mean(t$Weight), sd=sd(t$Weight)*n/(n-1))
sd(t$Weight)
ks.test(t$Weight, y=pnorm(q, mean=mean(t$Weight), sd=sd(t$Weight),alternative = c("two.sided", "less", "greater"), exact = NULL)
ks.test(t$Weight, y=pnorm(q, mean=mean(t$Weight), sd=sd(t$Weight)),alternative = c("two.sided", "less", "greater"), exact = NULL)
hist(y=pnorm(q, mean=mean(t$Weight), sd=sd(t$Weight)))
# summary(mydata)
y=pnorm(q, mean=mean(t$Weight), sd=sd(t$Weight))
# summary(mydata)
y=pnorm(q, mean=mean(t$Weight), sd=sd(t$Weight))
y=pnorm(q, mean=mean(t$Weight), sd=sd(t$Weight))
y=pnorm(q, mean=mean(t$Weight), sd=sd(t$Weight))
y=pnorm(q, mean=mean(t$Weight), sd=sd(t$Weight))
y=pnorm(q, mean=mean(t$Weight), sd=sd(t$Weight))
ks.test(t$Weight, y=pnorm(q, mean=mean(t$Weight), sd=sd(t$Weight)),alternative = c("two.sided", "less", "greater"), exact = NULL)
y=pnorm(q, mean=mean(t$Weight), sd=sd(t$Weight))
y=pnorm(mean=mean(t$Weight), sd=sd(t$Weight))
y=pnorm(0.mean=mean(t$Weight), sd=sd(t$Weight))
y=pnorm(0,mean=mean(t$Weight), sd=sd(t$Weight))
y=pnorm(len(t),mean=mean(t$Weight), sd=sd(t$Weight))
y=pnorm(length(t$Weight),mean=mean(t$Weight), sd=sd(t$Weight))
# summary(mydata)
y=pnorm(100, mean=mean(t$Weight), sd=sd(t$Weight))
y=pnorm(,mean=mean(t$Weight), sd=sd(t$Weight))
y
mean(t$Weight)
# summary(mydata)
y=pnorm(t$Weight, mean=mean(t$Weight), sd=sd(t$Weight))
ks.test(t$Weight,
y,
,alternative = c("two.sided", "less", "greater")
, exact = NULL)
install.packages("nortest")
library(nortest)
lillie.test(t$Weight)
lillie.test(t1$Weight)
lillie.test(mydata$Weight)
install.packages("MVN")
library(MVN)
library(MVN)
uniNorm(t$Weight, type = ”SW”, desc = TRUE)
uniNorm(t$Weight, type = "SW", desc = TRUE)
uniNorm(t$Weight, type = c("SW", "CVM", "Lillie", "SF", "AD"), desc = TRUE)
MVN.uniNorm(t$Weight, type = c("SW", "CVM", "Lillie", "SF", "AD"), desc = TRUE)
library(MVN)
uniNorm(t$Weight, type = c("SW", "CVM", "Lillie", "SF", "AD"), desc = TRUE)
library(MVN)
library(MVN)
library(MVN)
install.packages("MVN")
install.packages("MVN")
library(MVN)
install.packages("MVN")
library(MVN)
uniNorm(t$Weight, type = c("SW", "CVM", "Lillie", "SF", "AD"), desc = TRUE)
uniNorm
